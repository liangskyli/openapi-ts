/**
 * This file was auto-generated by @liangskyli/openapi-gen-ts.
 * Do not make direct changes to the file.
 */

import request from 'path';
import type { IApi } from './interface-api';

type IConfig<
  T extends Record<any, any> | unknown,
  U extends Record<any, any>,
> = T & U;
type Equal<T, U> = (<P>(x: P) => P extends T ? 1 : 2) extends <P>(
  x: P,
) => P extends U ? 1 : 2
  ? true
  : false;

export const requestApi = {
  '/root/v4/getNoQueryParams-v4': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Equal<T, never> extends true ? unknown : T,
        Record<any, any>
      >,
    ): Promise<IApi['/root/v4/getNoQueryParams-v4']['get']['Response']> => {
      const { ...otherConfig } = config;
      const finalURL = '/root/v4/getNoQueryParams-v4';

      return request({
        method: 'get',
        url: finalURL,

        ...otherConfig,
      });
    },
  },
  '/root/v4/postBody1-v4': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params' | 'data'>,
        {
          params: IApi['/root/v4/postBody1-v4']['post']['Query'];
          data: IApi['/root/v4/postBody1-v4']['post']['Body'];
        }
      >,
    ): Promise<IApi['/root/v4/postBody1-v4']['post']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = '/root/v4/postBody1-v4';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v4/postBody2-v4': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params' | 'data'>,
        {
          params: IApi['/root/v4/postBody2-v4']['post']['Query'];
          data?: IApi['/root/v4/postBody2-v4']['post']['Body'];
        }
      >,
    ): Promise<IApi['/root/v4/postBody2-v4']['post']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = '/root/v4/postBody2-v4';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v4/getQueryParams2-v4/{id}': {
    head: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['/root/v4/getQueryParams2-v4/{id}']['head']['Query'];
          path: IApi['/root/v4/getQueryParams2-v4/{id}']['head']['Path'];
        }
      >,
    ): Promise<
      IApi['/root/v4/getQueryParams2-v4/{id}']['head']['Response']
    > => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v4/getQueryParams2-v4/{id}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'head',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v4/getQueryParams3-v4': {
    patch: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v4/getQueryParams3-v4']['patch']['Query'] }
      >,
    ): Promise<IApi['/root/v4/getQueryParams3-v4']['patch']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4/getQueryParams3-v4';

      return request({
        method: 'patch',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v4/file': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v4/file']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v4/file']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v4/file';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v4/files': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v4/files']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v4/files']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v4/files';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v4/Put': {
    put: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v4/Put']['put']['Query'] }
      >,
    ): Promise<IApi['/root/v4/Put']['put']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4/Put';

      return request({
        method: 'put',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v4/Delete': {
    delete: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v4/Delete']['delete']['Query'] }
      >,
    ): Promise<IApi['/root/v4/Delete']['delete']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4/Delete';

      return request({
        method: 'delete',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v4': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v4']['get']['Query'] }
      >,
    ): Promise<IApi['/root/v4']['get']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v4/postBody3-v4': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v4/postBody3-v4']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v4/postBody3-v4']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v4/postBody3-v4';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/getQueryParams1-v3': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/getQueryParams1-v3']['get']['Query'] }
      >,
    ): Promise<IApi['/root/getQueryParams1-v3']['get']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/getQueryParams1-v3';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/getQueryParam-v3/{id}': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['/root/getQueryParam-v3/{id}']['get']['Query'];
          path: IApi['/root/getQueryParam-v3/{id}']['get']['Path'];
        }
      >,
    ): Promise<IApi['/root/getQueryParam-v3/{id}']['get']['Response']> => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/getQueryParam-v3/{id}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/postBody1-v3': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/postBody1-v3']['post']['Body'] }
      >,
    ): Promise<IApi['/root/postBody1-v3']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/postBody1-v3';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/postBody2-v3': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/postBody2-v3']['post']['Body'] }
      >,
    ): Promise<IApi['/root/postBody2-v3']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/postBody2-v3';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v2/getQueryParams1-v2': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v2/getQueryParams1-v2']['get']['Query'] }
      >,
    ): Promise<IApi['/root/v2/getQueryParams1-v2']['get']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v2/getQueryParams1-v2';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v2/getQueryParam-v2/{id}': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['/root/v2/getQueryParam-v2/{id}']['get']['Query'];
          path: IApi['/root/v2/getQueryParam-v2/{id}']['get']['Path'];
        }
      >,
    ): Promise<IApi['/root/v2/getQueryParam-v2/{id}']['get']['Response']> => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v2/getQueryParam-v2/{id}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v1/getQueryParams1': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v1/getQueryParams1']['get']['Query'] }
      >,
    ): Promise<IApi['/root/v1/getQueryParams1']['get']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParams1';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v1/getQueryParams1']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v1/getQueryParams1']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParams1';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v1/getQueryParams2': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v1/getQueryParams2']['get']['Query'] }
      >,
    ): Promise<IApi['/root/v1/getQueryParams2']['get']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParams2';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v1/getQueryParam': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['/root/v1/getQueryParam']['get']['Query'] }
      >,
    ): Promise<IApi['/root/v1/getQueryParam']['get']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParam';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v1/getQueryParamWithQueryParams/{path1}/{path2}': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['/root/v1/getQueryParamWithQueryParams/{path1}/{path2}']['get']['Query'];
          path: IApi['/root/v1/getQueryParamWithQueryParams/{path1}/{path2}']['get']['Path'];
        }
      >,
    ): Promise<
      IApi['/root/v1/getQueryParamWithQueryParams/{path1}/{path2}']['get']['Response']
    > => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v1/getQueryParamWithQueryParams/{path1}/{path2}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v1/getParam': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Equal<T, never> extends true ? unknown : T,
        { path: IApi['/root/v1/getParam']['get']['Path'] }
      >,
    ): Promise<IApi['/root/v1/getParam']['get']['Response']> => {
      const { path, ...otherConfig } = config;

      let finalURL = '/root/v1/getParam';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,

        ...otherConfig,
      });
    },
  },
  '/root/v1/getQueryParamWithParam': {
    get: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['/root/v1/getQueryParamWithParam']['get']['Query'];
          path: IApi['/root/v1/getQueryParamWithParam']['get']['Path'];
        }
      >,
    ): Promise<IApi['/root/v1/getQueryParamWithParam']['get']['Response']> => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v1/getQueryParamWithParam';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  '/root/v1/postBody1': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params' | 'data'>,
        {
          params: IApi['/root/v1/postBody1']['post']['Query'];
          data: IApi['/root/v1/postBody1']['post']['Body'];
        }
      >,
    ): Promise<IApi['/root/v1/postBody1']['post']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody1';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v1/postBody2': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v1/postBody2']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v1/postBody2']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody2';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v1/postBody3': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v1/postBody3']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v1/postBody3']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody3';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v1/postBody4': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v1/postBody4']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v1/postBody4']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody4';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v1/postBody5': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v1/postBody5']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v1/postBody5']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody5';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  '/root/v1/postBodyParam': {
    post: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['/root/v1/postBodyParam']['post']['Body'] }
      >,
    ): Promise<IApi['/root/v1/postBodyParam']['post']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBodyParam';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
};
