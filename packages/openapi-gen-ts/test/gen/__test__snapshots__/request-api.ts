/**
 * This file was auto-generated by @liangskyli/openapi-gen-ts.
 * Do not make direct changes to the file.
 */

import request from 'path';
import type { IApi } from './interface-api';

type IConfig<
  T extends Record<any, any> | unknown,
  U extends Record<any, any>,
> = T & U;
type Equal<T, U> = (<P>(x: P) => P extends T ? 1 : 2) extends <P>(
  x: P,
) => P extends U ? 1 : 2
  ? true
  : false;

export const requestApi = {
  get: {
    '/root/v4/getNoQueryParams-v4': <
      T extends Record<any, any> | never = never,
    >(
      config: IConfig<
        Equal<T, never> extends true ? unknown : T,
        Record<any, any>
      >,
    ): Promise<IApi['get']['/root/v4/getNoQueryParams-v4']['Response']> => {
      const { ...otherConfig } = config;
      const finalURL = '/root/v4/getNoQueryParams-v4';

      return request({
        method: 'get',
        url: finalURL,

        ...otherConfig,
      });
    },
    '/root/v4': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['get']['/root/v4']['Query'] }
      >,
    ): Promise<IApi['get']['/root/v4']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/getQueryParams1-v3': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['get']['/root/getQueryParams1-v3']['Query'] }
      >,
    ): Promise<IApi['get']['/root/getQueryParams1-v3']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/getQueryParams1-v3';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/getQueryParam-v3/{id}': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['get']['/root/getQueryParam-v3/{id}']['Query'];
          path: IApi['get']['/root/getQueryParam-v3/{id}']['Path'];
        }
      >,
    ): Promise<IApi['get']['/root/getQueryParam-v3/{id}']['Response']> => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/getQueryParam-v3/{id}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/v2/getQueryParams1-v2': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['get']['/root/v2/getQueryParams1-v2']['Query'] }
      >,
    ): Promise<IApi['get']['/root/v2/getQueryParams1-v2']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v2/getQueryParams1-v2';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/v2/getQueryParam-v2/{id}': <
      T extends Record<any, any> | never = never,
    >(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['get']['/root/v2/getQueryParam-v2/{id}']['Query'];
          path: IApi['get']['/root/v2/getQueryParam-v2/{id}']['Path'];
        }
      >,
    ): Promise<IApi['get']['/root/v2/getQueryParam-v2/{id}']['Response']> => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v2/getQueryParam-v2/{id}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/v1/getQueryParams1': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['get']['/root/v1/getQueryParams1']['Query'] }
      >,
    ): Promise<IApi['get']['/root/v1/getQueryParams1']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParams1';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/v1/getQueryParams2': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['get']['/root/v1/getQueryParams2']['Query'] }
      >,
    ): Promise<IApi['get']['/root/v1/getQueryParams2']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParams2';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/v1/getQueryParam': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['get']['/root/v1/getQueryParam']['Query'] }
      >,
    ): Promise<IApi['get']['/root/v1/getQueryParam']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParam';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/v1/getQueryParamWithQueryParams/{path1}/{path2}': <
      T extends Record<any, any> | never = never,
    >(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['get']['/root/v1/getQueryParamWithQueryParams/{path1}/{path2}']['Query'];
          path: IApi['get']['/root/v1/getQueryParamWithQueryParams/{path1}/{path2}']['Path'];
        }
      >,
    ): Promise<
      IApi['get']['/root/v1/getQueryParamWithQueryParams/{path1}/{path2}']['Response']
    > => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v1/getQueryParamWithQueryParams/{path1}/{path2}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
    '/root/v1/getParam': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Equal<T, never> extends true ? unknown : T,
        { path: IApi['get']['/root/v1/getParam']['Path'] }
      >,
    ): Promise<IApi['get']['/root/v1/getParam']['Response']> => {
      const { path, ...otherConfig } = config;

      let finalURL = '/root/v1/getParam';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,

        ...otherConfig,
      });
    },
    '/root/v1/getQueryParamWithParam': <
      T extends Record<any, any> | never = never,
    >(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['get']['/root/v1/getQueryParamWithParam']['Query'];
          path: IApi['get']['/root/v1/getQueryParamWithParam']['Path'];
        }
      >,
    ): Promise<IApi['get']['/root/v1/getQueryParamWithParam']['Response']> => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v1/getQueryParamWithParam';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  post: {
    '/root/v4/postBody1-v4': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params' | 'data'>,
        {
          params: IApi['post']['/root/v4/postBody1-v4']['Query'];
          data: IApi['post']['/root/v4/postBody1-v4']['Body'];
        }
      >,
    ): Promise<IApi['post']['/root/v4/postBody1-v4']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = '/root/v4/postBody1-v4';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
    '/root/v4/postBody2-v4': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params' | 'data'>,
        {
          params: IApi['post']['/root/v4/postBody2-v4']['Query'];
          data?: IApi['post']['/root/v4/postBody2-v4']['Body'];
        }
      >,
    ): Promise<IApi['post']['/root/v4/postBody2-v4']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = '/root/v4/postBody2-v4';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
    '/root/v4/file': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v4/file']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v4/file']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v4/file';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v4/files': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v4/files']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v4/files']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v4/files';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v4/postBody3-v4': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v4/postBody3-v4']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v4/postBody3-v4']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v4/postBody3-v4';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/postBody1-v3': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/postBody1-v3']['Body'] }
      >,
    ): Promise<IApi['post']['/root/postBody1-v3']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/postBody1-v3';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/postBody2-v3': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/postBody2-v3']['Body'] }
      >,
    ): Promise<IApi['post']['/root/postBody2-v3']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/postBody2-v3';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v1/getQueryParams1': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v1/getQueryParams1']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v1/getQueryParams1']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/getQueryParams1';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v1/postBody1': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params' | 'data'>,
        {
          params: IApi['post']['/root/v1/postBody1']['Query'];
          data: IApi['post']['/root/v1/postBody1']['Body'];
        }
      >,
    ): Promise<IApi['post']['/root/v1/postBody1']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody1';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
    '/root/v1/postBody2': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v1/postBody2']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v1/postBody2']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody2';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v1/postBody3': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v1/postBody3']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v1/postBody3']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody3';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v1/postBody4': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v1/postBody4']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v1/postBody4']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody4';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v1/postBody5': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v1/postBody5']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v1/postBody5']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBody5';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    '/root/v1/postBodyParam': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'data'>,
        { data: IApi['post']['/root/v1/postBodyParam']['Body'] }
      >,
    ): Promise<IApi['post']['/root/v1/postBodyParam']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = '/root/v1/postBodyParam';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
  },
  head: {
    '/root/v4/getQueryParams2-v4/{id}': <
      T extends Record<any, any> | never = never,
    >(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        {
          params: IApi['head']['/root/v4/getQueryParams2-v4/{id}']['Query'];
          path: IApi['head']['/root/v4/getQueryParams2-v4/{id}']['Path'];
        }
      >,
    ): Promise<
      IApi['head']['/root/v4/getQueryParams2-v4/{id}']['Response']
    > => {
      const { params, path, ...otherConfig } = config;

      let finalURL = '/root/v4/getQueryParams2-v4/{id}';
      for (const [k, v] of Object.entries(path)) {
        finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
      }

      return request({
        method: 'head',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  patch: {
    '/root/v4/getQueryParams3-v4': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['patch']['/root/v4/getQueryParams3-v4']['Query'] }
      >,
    ): Promise<IApi['patch']['/root/v4/getQueryParams3-v4']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4/getQueryParams3-v4';

      return request({
        method: 'patch',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  put: {
    '/root/v4/Put': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['put']['/root/v4/Put']['Query'] }
      >,
    ): Promise<IApi['put']['/root/v4/Put']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4/Put';

      return request({
        method: 'put',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  delete: {
    '/root/v4/Delete': <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['delete']['/root/v4/Delete']['Query'] }
      >,
    ): Promise<IApi['delete']['/root/v4/Delete']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = '/root/v4/Delete';

      return request({
        method: 'delete',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
};
