/**
 * This file was auto-generated by @liangskyli/openapi-gen-ts.
 * Do not make direct changes to the file.
 */

import type { IApi } from './interface-api';
import type { requestParamsType } from './request';
import request from './request';

type IConfig<
  T extends Record<any, any> | unknown,
  U extends Record<any, any>,
> = T & U;
type Equal<T, U> = (<P>(x: P) => P extends T ? 1 : 2) extends <P>(
  x: P,
) => P extends U ? 1 : 2
  ? true
  : false;

export const requestApi = {
  get: {
    url1: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params'>,
        { params: IApi['get']['url1']['Query'] }
      >,
    ): Promise<IApi['get']['url1']['Response']> => {
      const { params, ...otherConfig } = config;
      const finalURL = 'url1';

      return request({
        method: 'get',
        url: finalURL,
        params: params,

        ...otherConfig,
      });
    },
  },
  post: {
    url2: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<
          Equal<T, never> extends true
            ? requestParamsType
            : T & requestParamsType,
          'method' | 'url' | 'data'
        >,
        { data?: IApi['post']['url2']['Body'] }
      >,
    ): Promise<IApi['post']['url2']['Response']> => {
      const { data, ...otherConfig } = config;
      const finalURL = 'url2';

      return request({
        method: 'post',
        url: finalURL,

        data: data,
        ...otherConfig,
      });
    },
    url3: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<Equal<T, never> extends true ? unknown : T, 'params' | 'data'>,
        {
          params: IApi['post']['url3']['Query'];
          data: IApi['post']['url3']['Body'];
        }
      >,
    ): Promise<IApi['post']['url3']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = 'url3';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
    url4: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<
          Equal<T, never> extends true
            ? requestParamsType
            : T & requestParamsType,
          'method' | 'url' | 'params' | 'data'
        >,
        {
          params: IApi['post']['url4']['Query'];
          data: IApi['post']['url4']['Body'];
        }
      >,
    ): Promise<IApi['post']['url4']['Response']> => {
      const { params, data, ...otherConfig } = config;
      const finalURL = 'url4';

      return request({
        method: 'post',
        url: finalURL,
        params: params,
        data: data,
        ...otherConfig,
      });
    },
  },
  put: {
    url5: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Equal<T, never> extends true ? unknown : T,
        Record<any, any>
      >,
    ): Promise<IApi['put']['url5']['Response']> => {
      const { ...otherConfig } = config;
      const finalURL = 'url5';

      return request({
        method: 'put',
        url: finalURL,

        ...otherConfig,
      });
    },
    url6: <T extends Record<any, any> | never = never>(
      config: IConfig<
        Omit<
          Equal<T, never> extends true
            ? requestParamsType
            : T & requestParamsType,
          'method' | 'url'
        >,
        Record<any, any>
      >,
    ): Promise<IApi['put']['url6']['Response']> => {
      const { ...otherConfig } = config;
      const finalURL = 'url6';

      return request({
        method: 'put',
        url: finalURL,

        ...otherConfig,
      });
    },
  },
};
